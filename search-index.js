var searchIndex = {};
searchIndex["vst"] = {"doc":"rust-vst is a rust implementation of the VST2.4 API","items":[[0,"buffer","vst","Buffers to safely work with audio samples.",null,null],[3,"AudioBuffer","vst::buffer","`AudioBuffer` contains references to the audio buffers for all input and output channels.",null,null],[3,"Inputs","","Wrapper type to access the buffers for the input channels of an `AudioBuffer` in a safe way. Behaves like a slice.",null,null],[3,"InputIterator","","Iterator over buffers for input channels of an `AudioBuffer`.",null,null],[3,"Outputs","","Wrapper type to access the buffers for the output channels of an `AudioBuffer` in a safe way. Behaves like a slice.",null,null],[3,"OutputIterator","","Iterator over buffers for output channels of an `AudioBuffer`.",null,null],[3,"SendEventBuffer","","This buffer is used for sending midi events through the VST interface. The purpose of this is to convert outgoing midi events from `event::Event` to `api::Events`. It only allocates memory in new() and reuses the memory between calls.",null,null],[6,"PlaceholderEvent","","This is used as a placeholder to pre-allocate space for a fixed number of midi events in the re-useable `SendEventBuffer`, because `SysExEvent` is larger than `MidiEvent`, so either one can be stored in a `SysExEvent`.",null,null],[8,"WriteIntoPlaceholder","","This trait is used by `SendEventBuffer::send_events` to accept iterators over midi events",null,null],[10,"write_into","","writes an event into the given placeholder memory location",0,{"i":[{"n":"self"},{"n":"placeholderevent"}]}],[11,"from_raw","","Create an `AudioBuffer` from raw pointers. Only really useful for interacting with the VST API.",1,null],[11,"input_count","","The number of input channels that this buffer was created for",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"output_count","","The number of output channels that this buffer was created for",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"samples","","The number of samples in this buffer (same for all channels)",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"split","","Split this buffer into separate inputs and outputs.",1,null],[11,"zip","","Zip together buffers.",1,{"i":[{"n":"self"}],"o":{"g":["inputiterator","outputiterator"],"n":"zip"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"inputs"}}],[11,"len","","Number of channels",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the buffer is empty",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Access channel at the given index, unchecked",2,null],[11,"split_at","","Split borrowing at the given index, like for slices",2,null],[11,"index","","",2,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",2,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"outputs"}}],[11,"len","","Number of channels",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the buffer is empty",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Access channel at the given index, unchecked",4,null],[11,"get_mut","","Mutably access channel at the given index, unchecked",4,null],[11,"split_at_mut","","Split borrowing at the given index, like for slices",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",4,null],[11,"default","","",6,{"o":{"n":"self"}}],[11,"new","","Creates a buffer for sending up to the given number of midi events per frame",6,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"send_events","","Sends events to the host. See the `fwd_midi` example.",6,{"i":[{"n":"self"},{"n":"t"},{"n":"host"}]}],[11,"send_events_to_plugin","","Sends events from the host to a plugin.",6,{"i":[{"n":"self"},{"n":"t"},{"n":"plugin"}]}],[0,"api","vst","Structures and types for interfacing with the VST 2.4 API.",null,null],[3,"AEffect","vst::api","Used with the VST API to pass around plugin information.",null,null],[12,"magic","","Magic number. Must be `['V', 'S', 'T', 'P']`.",7,null],[12,"dispatcher","","Host to plug-in dispatcher.",7,null],[12,"_process","","Accumulating process mode is deprecated in VST 2.4! Use `processReplacing` instead!",7,null],[12,"setParameter","","Set value of automatable parameter.",7,null],[12,"getParameter","","Get value of automatable parameter.",7,null],[12,"numPrograms","","Number of programs (Presets).",7,null],[12,"numParams","","Number of parameters. All programs are assumed to have this many parameters.",7,null],[12,"numInputs","","Number of audio inputs.",7,null],[12,"numOutputs","","Number of audio outputs.",7,null],[12,"flags","","Bitmask made of values from `api::PluginFlags`.",7,null],[12,"reserved1","","Reserved for host, must be 0.",7,null],[12,"reserved2","","Reserved for host, must be 0.",7,null],[12,"initialDelay","","For algorithms which need input in the first place (Group delay or latency in samples).",7,null],[12,"_realQualities","","Deprecated unused member.",7,null],[12,"_offQualities","","Deprecated unused member.",7,null],[12,"_ioRatio","","Deprecated unused member.",7,null],[12,"object","","Void pointer usable by api to store object data.",7,null],[12,"user","","User defined pointer.",7,null],[12,"uniqueId","","Registered unique identifier (register it at Steinberg 3rd party support Web). This is used to identify a plug-in during save+load of preset and project.",7,null],[12,"version","","Plug-in version (e.g. 1100 for v1.1.0.0).",7,null],[12,"processReplacing","","Process audio samples in replacing mode.",7,null],[12,"processReplacingF64","","Process double-precision audio samples in replacing mode.",7,null],[12,"future","","Reserved for future use (please zero).",7,null],[3,"ChannelProperties","","Information about a channel. Only some hosts use this information.",null,null],[12,"name","","Channel name.",8,null],[12,"flags","","Flags found in `ChannelFlags`.",8,null],[12,"arrangement_type","","Type of speaker arrangement this channel is a part of.",8,null],[12,"short_name","","Name of channel (recommended: 6 characters + delimiter).",8,null],[12,"future","","Reserved for future use.",8,null],[3,"FileType","","File type descriptor.",null,null],[12,"name","","Display name of file type.",9,null],[12,"osx_type","","OS X file type.",9,null],[12,"win_type","","Windows file type.",9,null],[12,"nix_type","","Unix file type.",9,null],[12,"mime_type_1","","MIME type.",9,null],[12,"mime_type_2","","Additional MIME type.",9,null],[3,"FileSelect","","File selector descriptor used in `host::OpCode::OpenFileSelector`.",null,null],[12,"command","","The type of file selection to perform.",10,null],[12,"select_type","","The file selector to open.",10,null],[12,"mac_creator","","Unknown. 0 = no creator.",10,null],[12,"num_types","","Number of file types.",10,null],[12,"file_types","","List of file types to show.",10,null],[12,"title","","File selector's title.",10,null],[12,"initial_path","","Initial path.",10,null],[12,"return_path","","Used when operation returns a single path.",10,null],[12,"size_return_path","","Size of the path buffer in bytes.",10,null],[12,"return_multiple_paths","","Used when operation returns multiple paths.",10,null],[12,"num_paths","","Number of paths returned.",10,null],[12,"reserved","","Reserved by host.",10,null],[12,"future","","Reserved for future use.",10,null],[3,"Events","","A struct which contains events.",null,null],[12,"num_events","","Number of events.",11,null],[12,"_reserved","","Reserved for future use. Should be 0.",11,null],[12,"events","","Variable-length array of pointers to `api::Event` objects.",11,null],[3,"EventIterator","","An iterator over events, returned by `api::Events::events`",null,null],[3,"Event","","A VST event intended to be casted to a corresponding type.",null,null],[12,"event_type","","The type of event. This lets you know which event this object should be casted to.",12,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<Event>()`.",12,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",12,null],[12,"_flags","","Generic flags, none defined in VST api yet.",12,null],[12,"_reserved","","The `Event` type is cast appropriately, so this acts as reserved space.",12,null],[3,"MidiEvent","","A midi event.",null,null],[12,"event_type","","Should be `EventType::Midi`.",13,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<MidiEvent>()`.",13,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",13,null],[12,"flags","","See `MidiEventFlags`.",13,null],[12,"note_length","","Length in sample frames of entire note if available, otherwise 0.",13,null],[12,"note_offset","","Offset in samples into note from start if available, otherwise 0.",13,null],[12,"midi_data","","1 to 3 midi bytes. TODO: Doc",13,null],[12,"_midi_reserved","","Reserved midi byte (0).",13,null],[12,"detune","","Detuning between -63 and +64 cents, for scales other than 'well-tempered'. e.g. 'microtuning'",13,null],[12,"note_off_velocity","","Note off velocity between 0 and 127.",13,null],[12,"_reserved1","","Reserved for future use. Should be 0.",13,null],[12,"_reserved2","","Reserved for future use. Should be 0.",13,null],[3,"SysExEvent","","A midi system exclusive event.",null,null],[12,"event_type","","Should be `EventType::SysEx`.",14,null],[12,"byte_size","","Size of this structure; `mem::sizeof::<SysExEvent>()`.",14,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",14,null],[12,"_flags","","Generic flags, none defined in VST api yet.",14,null],[12,"data_size","","Size of payload in bytes.",14,null],[12,"_reserved1","","Reserved for future use. Should be 0.",14,null],[12,"system_data","","Pointer to payload.",14,null],[12,"_reserved2","","Reserved for future use. Should be 0.",14,null],[3,"TimeInfo","","Describes the time at the start of the block currently being processed",null,null],[12,"sample_pos","","current Position in audio samples (always valid)",15,null],[12,"sample_rate","","current Sample Rate in Hertz (always valid)",15,null],[12,"nanoseconds","","System Time in nanoseconds (10^-9 second)",15,null],[12,"ppq_pos","","Musical Position, in Quarter Note (1.0 equals 1 Quarter Note)",15,null],[12,"tempo","","current Tempo in BPM (Beats Per Minute)",15,null],[12,"bar_start_pos","","last Bar Start Position, in Quarter Note",15,null],[12,"cycle_start_pos","","Cycle Start (left locator), in Quarter Note",15,null],[12,"cycle_end_pos","","Cycle End (right locator), in Quarter Note",15,null],[12,"time_sig_numerator","","Time Signature Numerator (e.g. 3 for 3/4)",15,null],[12,"time_sig_denominator","","Time Signature Denominator (e.g. 4 for 3/4)",15,null],[12,"smpte_offset","","SMPTE offset in SMPTE subframes (bits; 1/80 of a frame). The current SMPTE position can be calculated using `sample_pos`, `sample_rate`, and `smpte_frame_rate`.",15,null],[12,"smpte_frame_rate","","See `SmpteFrameRate`",15,null],[12,"samples_to_next_clock","","MIDI Clock Resolution (24 Per Quarter Note), can be negative (nearest clock)",15,null],[12,"flags","","See `TimeInfoFlags`",15,null],[3,"ChannelFlags","","Flags for VST channels.",null,null],[3,"PluginFlags","","Flags for VST plugins.",null,null],[3,"ModifierKey","","Cross platform modifier key flags.",null,null],[3,"MidiEventFlags","","MIDI event flags.",null,null],[3,"TimeInfoFlags","","Used in the `flags` field of `TimeInfo`, and for querying the host for specific values",null,null],[4,"SpeakerArrangementType","","Tells the host how the channels are intended to be used in the plugin. Only useful for some hosts.",null,null],[13,"Custom","","User defined arrangement.",16,null],[13,"Empty","","Empty arrangement.",16,null],[13,"Mono","","Mono.",16,null],[13,"Stereo","","L R",16,null],[13,"StereoSurround","","Ls Rs",16,null],[13,"StereoCenter","","Lc Rc",16,null],[13,"StereoSide","","Sl Sr",16,null],[13,"StereoCLfe","","C Lfe",16,null],[13,"Cinema30","","L R C",16,null],[13,"Music30","","L R S",16,null],[13,"Cinema31","","L R C Lfe",16,null],[13,"Music31","","L R Lfe S",16,null],[13,"Cinema40","","L R C S (LCRS)",16,null],[13,"Music40","","L R Ls Rs (Quadro)",16,null],[13,"Cinema41","","L R C Lfe S (LCRS + Lfe)",16,null],[13,"Music41","","L R Lfe Ls Rs (Quadro + Lfe)",16,null],[13,"Surround50","","L R C Ls Rs",16,null],[13,"Surround51","","L R C Lfe Ls Rs",16,null],[13,"Cinema60","","L R C Ls  Rs Cs",16,null],[13,"Music60","","L R Ls Rs  Sl Sr",16,null],[13,"Cinema61","","L R C Lfe Ls Rs Cs",16,null],[13,"Music61","","L R Lfe Ls Rs Sl Sr",16,null],[13,"Cinema70","","L R C Ls Rs Lc Rc",16,null],[13,"Music70","","L R C Ls Rs Sl Sr",16,null],[13,"Cinema71","","L R C Lfe Ls Rs Lc Rc",16,null],[13,"Music71","","L R C Lfe Ls Rs Sl Sr",16,null],[13,"Cinema80","","L R C Ls Rs Lc Rc Cs",16,null],[13,"Music80","","L R C Ls Rs Cs Sl Sr",16,null],[13,"Cinema81","","L R C Lfe Ls Rs Lc Rc Cs",16,null],[13,"Music81","","L R C Lfe Ls Rs Cs Sl Sr",16,null],[13,"Surround102","","L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",16,null],[4,"Supported","","Used to specify whether functionality is supported.",null,null],[13,"Yes","","",17,null],[13,"Maybe","","",17,null],[13,"No","","",17,null],[4,"ProcessLevel","","Denotes in which thread the host is in.",null,null],[13,"Unknown","","Unsupported by host.",18,null],[13,"User","","GUI thread.",18,null],[13,"Realtime","","Audio process thread.",18,null],[13,"Prefetch","","Sequence thread (MIDI, etc).",18,null],[13,"Offline","","Offline processing thread (therefore GUI/user thread).",18,null],[4,"HostLanguage","","Language that the host is using.",null,null],[13,"English","","",19,null],[13,"German","","",19,null],[13,"French","","",19,null],[13,"Italian","","",19,null],[13,"Spanish","","",19,null],[13,"Japanese","","",19,null],[4,"FileSelectCommand","","The file operation to perform.",null,null],[13,"Load","","Load a file.",20,null],[13,"Save","","Save a file.",20,null],[13,"LoadMultipleFiles","","Load multiple files simultaneously.",20,null],[13,"SelectDirectory","","Choose a directory.",20,null],[4,"FileSelectType","","Format to select files.",null,null],[13,"Regular","","Regular file selector.",21,null],[4,"EventType","","The type of event that has occured. See `api::Event.event_type`.",null,null],[13,"Midi","","Midi event. See `api::MidiEvent`.",22,null],[13,"_Audio","","Deprecated.",22,null],[13,"_Video","","Deprecated.",22,null],[13,"_Parameter","","Deprecated.",22,null],[13,"_Trigger","","Deprecated.",22,null],[13,"SysEx","","System exclusive event. See `api::SysExEvent`.",22,null],[4,"SmpteFrameRate","","SMPTE Frame Rates.",null,null],[13,"Smpte24fps","","24 fps",23,null],[13,"Smpte25fps","","25 fps",23,null],[13,"Smpte2997fps","","29.97 fps",23,null],[13,"Smpte30fps","","30 fps",23,null],[13,"Smpte2997dfps","","29.97 drop",23,null],[13,"Smpte30dfps","","30 drop",23,null],[13,"SmpteFilm16mm","","Film 16mm",23,null],[13,"SmpteFilm35mm","","Film 35mm",23,null],[13,"Smpte239fps","","HDTV: 23.976 fps",23,null],[13,"Smpte249fps","","HDTV: 24.976 fps",23,null],[13,"Smpte599fps","","HDTV: 59.94 fps",23,null],[13,"Smpte60fps","","HDTV: 60 fps",23,null],[0,"consts","","Constant values",null,null],[17,"MAX_PRESET_NAME_LEN","vst::api::consts","",null,null],[17,"MAX_PARAM_STR_LEN","","",null,null],[17,"MAX_LABEL","","",null,null],[17,"MAX_SHORT_LABEL","","",null,null],[17,"MAX_PRODUCT_STR_LEN","","",null,null],[17,"MAX_VENDOR_STR_LEN","","",null,null],[17,"VST_MAGIC","","VST plugins are identified by a magic number. This corresponds to 0x56737450.",null,null],[6,"PluginMain","vst::api","`VSTPluginMain` function signature.",null,null],[6,"HostCallbackProc","","Host callback function passed to plugin. Can be used to query host information from plugin side.",null,null],[6,"DispatcherProc","","Dispatcher function used to process opcodes. Called by host.",null,null],[6,"ProcessProc","","Process function used to process 32 bit floating point samples. Called by host.",null,null],[6,"ProcessProcF64","","Process function used to process 64 bit floating point samples. Called by host.",null,null],[6,"SetParameterProc","","Callback function used to set parameter values. Called by host.",null,null],[6,"GetParameterProc","","Callback function used to get parameter values. Called by host.",null,null],[11,"get_plugin","","Return handle to Plugin object. Only works for plugins created using this library.",7,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"drop_plugin","","Drop the Plugin object. Only works for plugins created using this library.",7,{"i":[{"n":"self"}]}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"speakerarrangementtype"}}],[11,"from","","Create a `Supported` value from an integer if possible.",17,{"i":[{"n":"isize"}],"o":{"g":["supported"],"n":"option"}}],[11,"into","","Convert to integer ordinal for interop with VST api.",17,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"events","","Use this in your impl of process_events() to process the incoming midi events.",11,{"i":[{"n":"self"}],"o":{"n":"eventiterator"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"eventtype"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"sysexevent"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"timeinfo"}}],[11,"default","","",15,{"o":{"n":"timeinfo"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"smpteframerate"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",23,{"o":{"n":"self"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"channelflags"}}],[11,"partial_cmp","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"le","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"gt","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"ge","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"cmp","","",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"ACTIVE","","Indicates channel is active. Ignored by host.",25,null],[18,"STEREO","","Indicates channel is first of stereo pair.",25,null],[18,"SPEAKER","","Use channel's specified speaker_arrangement instead of stereo flag.",25,null],[11,"empty","","Returns an empty set of flags.",25,{"o":{"n":"channelflags"}}],[11,"all","","Returns the set containing all flags.",25,{"o":{"n":"channelflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"i":[{"n":"i32"}],"o":{"g":["channelflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"i":[{"n":"i32"}],"o":{"n":"channelflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"remove","","Removes the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",25,{"i":[{"n":"self"},{"n":"channelflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"channelflags"}}],[11,"bitor_assign","","Adds the set of flags.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"channelflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"channelflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"channelflags"}],"o":{"n":"channelflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",25,{"i":[{"n":"self"},{"n":"channelflags"}]}],[11,"not","","Returns the complement of this set of flags.",25,{"i":[{"n":"self"}],"o":{"n":"channelflags"}}],[11,"extend","","",25,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",25,{"i":[{"n":"t"}],"o":{"n":"channelflags"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"pluginflags"}}],[11,"partial_cmp","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"le","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"gt","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"ge","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"cmp","","",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"ordering"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"HAS_EDITOR","","Plugin has an editor.",26,null],[18,"CAN_REPLACING","","Plugin can process 32 bit audio. (Mandatory in VST 2.4).",26,null],[18,"PROGRAM_CHUNKS","","Plugin preset data is handled in formatless chunks.",26,null],[18,"IS_SYNTH","","Plugin is a synth.",26,null],[18,"NO_SOUND_IN_STOP","","Plugin does not produce sound when all input is silence.",26,null],[18,"CAN_DOUBLE_REPLACING","","Supports 64 bit audio processing.",26,null],[11,"empty","","Returns an empty set of flags.",26,{"o":{"n":"pluginflags"}}],[11,"all","","Returns the set containing all flags.",26,{"o":{"n":"pluginflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,{"i":[{"n":"i32"}],"o":{"g":["pluginflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,{"i":[{"n":"i32"}],"o":{"n":"pluginflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"remove","","Removes the specified flags in-place.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",26,{"i":[{"n":"self"},{"n":"pluginflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"pluginflags"}}],[11,"bitor_assign","","Adds the set of flags.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"pluginflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"pluginflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"i":[{"n":"self"},{"n":"pluginflags"}],"o":{"n":"pluginflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",26,{"i":[{"n":"self"},{"n":"pluginflags"}]}],[11,"not","","Returns the complement of this set of flags.",26,{"i":[{"n":"self"}],"o":{"n":"pluginflags"}}],[11,"extend","","",26,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",26,{"i":[{"n":"t"}],"o":{"n":"pluginflags"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"le","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"gt","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ge","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"SHIFT","","Shift key.",27,null],[18,"ALT","","Alt key.",27,null],[18,"COMMAND","","Control on mac.",27,null],[18,"CONTROL","","Command on mac, ctrl on other.",27,null],[11,"empty","","Returns an empty set of flags.",27,{"o":{"n":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",27,{"o":{"n":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"i":[{"n":"u8"}],"o":{"g":["modifierkey"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"i":[{"n":"u8"}],"o":{"n":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"remove","","Removes the specified flags in-place.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"toggle","","Toggles the specified flags in-place.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",27,{"i":[{"n":"self"},{"n":"modifierkey"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"not","","Returns the complement of this set of flags.",27,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"extend","","",27,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",27,{"i":[{"n":"t"}],"o":{"n":"modifierkey"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"midieventflags"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"REALTIME_EVENT","","This event is played live (not in playback from a sequencer track). This allows the plugin to handle these flagged events with higher priority, especially when the plugin has a big latency as per `plugin::Info::initial_delay`.",28,null],[11,"empty","","Returns an empty set of flags.",28,{"o":{"n":"midieventflags"}}],[11,"all","","Returns the set containing all flags.",28,{"o":{"n":"midieventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",28,{"i":[{"n":"i32"}],"o":{"g":["midieventflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",28,{"i":[{"n":"i32"}],"o":{"n":"midieventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"remove","","Removes the specified flags in-place.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",28,{"i":[{"n":"self"},{"n":"midieventflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"midieventflags"}}],[11,"bitor_assign","","Adds the set of flags.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"midieventflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"midieventflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"i":[{"n":"self"},{"n":"midieventflags"}],"o":{"n":"midieventflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",28,{"i":[{"n":"self"},{"n":"midieventflags"}]}],[11,"not","","Returns the complement of this set of flags.",28,{"i":[{"n":"self"}],"o":{"n":"midieventflags"}}],[11,"extend","","",28,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",28,{"i":[{"n":"t"}],"o":{"n":"midieventflags"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"timeinfoflags"}}],[11,"partial_cmp","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"le","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"gt","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"ge","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"cmp","","",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"TRANSPORT_CHANGED","","Indicates that play, cycle or record state has changed.",29,null],[18,"TRANSPORT_PLAYING","","Set if Host sequencer is currently playing.",29,null],[18,"TRANSPORT_CYCLE_ACTIVE","","Set if Host sequencer is in cycle mode.",29,null],[18,"TRANSPORT_RECORDING","","Set if Host sequencer is in record mode.",29,null],[18,"AUTOMATION_WRITING","","Set if automation write mode active (record parameter changes).",29,null],[18,"AUTOMATION_READING","","Set if automation read mode active (play parameter changes).",29,null],[18,"NANOSECONDS_VALID","","Set if TimeInfo::nanoseconds is valid.",29,null],[18,"PPQ_POS_VALID","","Set if TimeInfo::ppq_pos is valid.",29,null],[18,"TEMPO_VALID","","Set if TimeInfo::tempo is valid.",29,null],[18,"BARS_VALID","","Set if TimeInfo::bar_start_pos is valid.",29,null],[18,"CYCLE_POS_VALID","","Set if both TimeInfo::cycle_start_pos and VstTimeInfo::cycle_end_pos are valid.",29,null],[18,"TIME_SIG_VALID","","Set if both TimeInfo::time_sig_numerator and TimeInfo::time_sig_denominator are valid.",29,null],[18,"SMPTE_VALID","","Set if both TimeInfo::smpte_offset and VstTimeInfo::smpte_frame_rate are valid.",29,null],[18,"VST_CLOCK_VALID","","Set if TimeInfo::samples_to_next_clock is valid.",29,null],[11,"empty","","Returns an empty set of flags.",29,{"o":{"n":"timeinfoflags"}}],[11,"all","","Returns the set containing all flags.",29,{"o":{"n":"timeinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",29,{"i":[{"n":"i32"}],"o":{"g":["timeinfoflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",29,{"i":[{"n":"i32"}],"o":{"n":"timeinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"remove","","Removes the specified flags in-place.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"timeinfoflags"}}],[11,"bitor_assign","","Adds the set of flags.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"timeinfoflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"timeinfoflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}],"o":{"n":"timeinfoflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",29,{"i":[{"n":"self"},{"n":"timeinfoflags"}]}],[11,"not","","Returns the complement of this set of flags.",29,{"i":[{"n":"self"}],"o":{"n":"timeinfoflags"}}],[11,"extend","","",29,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",29,{"i":[{"n":"t"}],"o":{"n":"timeinfoflags"}}],[0,"editor","vst","All VST plugin editor related functionality.",null,null],[3,"KeyCode","vst::editor","A platform independent key code. Includes modifier keys.",null,null],[12,"character","","ASCII character for key pressed (if applicable).",30,null],[12,"key","","Key pressed. See `enums::Key`.",30,null],[12,"modifier","","Modifier key bitflags. See `enums::flags::modifier_key`.",30,null],[4,"KnobMode","","Allows host to set how a parameter knob works.",null,null],[13,"Circular","","",31,null],[13,"CircularRelative","","",31,null],[13,"Linear","","",31,null],[4,"Key","","Platform independent key codes.",null,null],[13,"Back","","",32,null],[13,"Tab","","",32,null],[13,"Clear","","",32,null],[13,"Return","","",32,null],[13,"Pause","","",32,null],[13,"Escape","","",32,null],[13,"Space","","",32,null],[13,"Next","","",32,null],[13,"End","","",32,null],[13,"Home","","",32,null],[13,"Left","","",32,null],[13,"Up","","",32,null],[13,"Right","","",32,null],[13,"Down","","",32,null],[13,"PageUp","","",32,null],[13,"PageDown","","",32,null],[13,"Select","","",32,null],[13,"Print","","",32,null],[13,"Enter","","",32,null],[13,"Snapshot","","",32,null],[13,"Insert","","",32,null],[13,"Delete","","",32,null],[13,"Help","","",32,null],[13,"Numpad0","","",32,null],[13,"Numpad1","","",32,null],[13,"Numpad2","","",32,null],[13,"Numpad3","","",32,null],[13,"Numpad4","","",32,null],[13,"Numpad5","","",32,null],[13,"Numpad6","","",32,null],[13,"Numpad7","","",32,null],[13,"Numpad8","","",32,null],[13,"Numpad9","","",32,null],[13,"Multiply","","",32,null],[13,"Add","","",32,null],[13,"Separator","","",32,null],[13,"Subtract","","",32,null],[13,"Decimal","","",32,null],[13,"Divide","","",32,null],[13,"F1","","",32,null],[13,"F2","","",32,null],[13,"F3","","",32,null],[13,"F4","","",32,null],[13,"F5","","",32,null],[13,"F6","","",32,null],[13,"F7","","",32,null],[13,"F8","","",32,null],[13,"F9","","",32,null],[13,"F10","","",32,null],[13,"F11","","",32,null],[13,"F12","","",32,null],[13,"Numlock","","",32,null],[13,"Scroll","","",32,null],[13,"Shift","","",32,null],[13,"Control","","",32,null],[13,"Alt","","",32,null],[13,"Equals","","",32,null],[8,"Editor","","Implemented by plugin editors.",null,null],[10,"size","","Get the size of the editor window.",33,null],[10,"position","","Get the coordinates of the editor window.",33,null],[11,"idle","","Editor idle call. Called by host.",33,{"i":[{"n":"self"}]}],[11,"close","","Called when the editor window is closed.",33,{"i":[{"n":"self"}]}],[10,"open","","Called when the editor window is opened. `window` is a platform dependent window pointer (e.g. `HWND` on Windows, `WindowRef` on OSX, `Window` on X11/Linux).",33,null],[10,"is_open","","Return whether the window is currently open.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_knob_mode","","Set the knob mode for this editor (if supported by host).",33,{"i":[{"n":"self"},{"n":"knobmode"}],"o":{"n":"bool"}}],[11,"key_up","","Recieve key up event. Return true if the key was used.",33,{"i":[{"n":"self"},{"n":"keycode"}],"o":{"n":"bool"}}],[11,"key_down","","Receive key down event. Return true if the key was used.",33,{"i":[{"n":"self"},{"n":"keycode"}],"o":{"n":"bool"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"keycode"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"knobmode"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",31,{"i":[{"n":"i8"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"from","","",31,{"i":[{"n":"i16"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"from","","",31,{"i":[{"n":"i32"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from","","",31,{"i":[{"n":"i64"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"from","","",31,{"i":[{"n":"isize"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"from","","",31,{"i":[{"n":"u8"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","",31,{"i":[{"n":"u16"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"from","","",31,{"i":[{"n":"u32"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from","","",31,{"i":[{"n":"u64"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from","","",31,{"i":[{"n":"usize"}],"o":{"n":"knobmode"}}],[11,"into","","",31,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"key"}}],[11,"from","","",32,{"i":[{"n":"i8"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"from","","",32,{"i":[{"n":"i16"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"from","","",32,{"i":[{"n":"i32"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from","","",32,{"i":[{"n":"i64"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"from","","",32,{"i":[{"n":"isize"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"from","","",32,{"i":[{"n":"u8"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","",32,{"i":[{"n":"u16"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"from","","",32,{"i":[{"n":"u32"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from","","",32,{"i":[{"n":"u64"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from","","",32,{"i":[{"n":"usize"}],"o":{"n":"key"}}],[11,"into","","",32,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"channels","vst","Meta data for dealing with input / output channels. Not all hosts use this so it is not necessary for plugin functionality.",null,null],[3,"ChannelInfo","vst::channels","Information about an input / output channel. This isn't necessary for a channel to function but informs the host how the channel is meant to be used.",null,null],[4,"ArrangementTarget","","Target for Speaker arrangement type. Can be a cinema configuration or music configuration. Both are technically identical but this provides extra information to the host.",null,null],[13,"Music","","Music arrangement. Technically identical to Cinema.",34,null],[13,"Cinema","","Cinematic arrangement. Technically identical to Music.",34,null],[4,"StereoChannel","","An enum for all channels in a stereo configuration.",null,null],[13,"Left","","Left channel.",35,null],[13,"Right","","Right channel.",35,null],[4,"StereoConfig","","Possible stereo speaker configurations.",null,null],[13,"L_R","","Regular.",36,null],[13,"Ls_Rs","","Left surround, right surround.",36,null],[13,"Lc_Rc","","Left center, right center.",36,null],[13,"Sl_Sr","","Side left, side right.",36,null],[13,"C_Lfe","","Center, low frequency effects.",36,null],[4,"SurroundConfig","","Possible surround speaker configurations.",null,null],[13,"S3_0","","3.0 surround sound. Cinema: L R C Music: L R S",37,null],[13,"S3_1","","3.1 surround sound. Cinema: L R C Lfe Music: L R Lfe S",37,null],[13,"S4_0","","4.0 surround sound. Cinema: L R C S (LCRS) Music: L R Ls Rs (Quadro)",37,null],[13,"S4_1","","4.1 surround sound. Cinema: L R C Lfe S (LCRS + Lfe) Music: L R Ls Rs (Quadro + Lfe)",37,null],[13,"S5_0","","5.0 surround sound. Cinema and music: L R C Ls Rs",37,null],[13,"S5_1","","5.1 surround sound. Cinema and music: L R C Lfe Ls Rs",37,null],[13,"S6_0","","6.0 surround sound. Cinema: L R C Ls Rs Cs Music: L R Ls Rs Sl Sr",37,null],[13,"S6_1","","6.1 surround sound. Cinema: L R C Lfe Ls Rs Cs Music: L R Ls Rs Sl Sr",37,null],[13,"S7_0","","7.0 surround sound. Cinema: L R C Ls Rs Lc Rc Music: L R C Ls Rs Sl Sr",37,null],[13,"S7_1","","7.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Music: L R C Lfe Ls Rs Sl Sr",37,null],[13,"S8_0","","8.0 surround sound. Cinema: L R C Ls Rs Lc Rc Cs Music: L R C Ls Rs Cs Sl Sr",37,null],[13,"S8_1","","8.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Cs Music: L R C Lfe Ls Rs Cs Sl Sr",37,null],[13,"S10_2","","10.2 surround sound. Cinema + Music: L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",37,null],[4,"SpeakerArrangementType","","Type representing how a channel is used. Only useful for some hosts.",null,null],[13,"Custom","","Custom arrangement not specified to host.",38,null],[13,"Empty","","Empty arrangement.",38,null],[13,"Mono","","Mono channel.",38,null],[13,"Stereo","","Stereo channel. Contains type of stereo arrangement and speaker represented.",38,null],[13,"Surround","","Surround channel. Contains surround arrangement and target (cinema or music).",38,null],[11,"new","","Construct a new `ChannelInfo` object.",39,{"i":[{"n":"string"},{"g":["string"],"n":"option"},{"n":"bool"},{"g":["speakerarrangementtype"],"n":"option"}],"o":{"n":"channelinfo"}}],[11,"into","","Convert to the VST api equivalent of this structure.",39,{"i":[{"n":"self"}],"o":{"n":"channelproperties"}}],[11,"from","","",39,{"i":[{"n":"channelproperties"}],"o":{"n":"channelinfo"}}],[11,"default","","",38,{"o":{"n":"speakerarrangementtype"}}],[11,"is_speaker_type","","Determine whether this channel is part of a surround speaker arrangement.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_left_stereo","","Determine whether this channel is the left speaker in a stereo pair.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into","","Convert to VST API arrangement type.",38,{"i":[{"n":"self"}],"o":{"n":"speakerarrangementtype"}}],[11,"from","","",38,{"i":[{"n":"channelproperties"}],"o":{"n":"speakerarrangementtype"}}],[0,"event","vst","Interfaces to VST events.",null,null],[3,"MidiEvent","vst::event","A midi event.",null,null],[12,"data","","The raw midi data associated with this event.",40,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",40,null],[12,"live","","This midi event was created live as opposed to being played back in the sequencer.",40,null],[12,"note_length","","The length of the midi note associated with this event, if available.",40,null],[12,"note_offset","","Offset in samples into note from note start, if available.",40,null],[12,"detune","","Detuning between -63 and +64 cents.",40,null],[12,"note_off_velocity","","Note off velocity between 0 and 127.",40,null],[3,"SysExEvent","","A system exclusive event.",null,null],[12,"payload","","The SysEx payload.",41,null],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",41,null],[4,"Event","","A VST event.",null,null],[13,"Midi","","A midi event.",42,null],[13,"SysEx","","A system exclusive event.",42,null],[13,"Deprecated","","A deprecated event.",42,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"midievent"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"sysexevent"}}],[11,"from","","",42,{"i":[{"n":"event"}],"o":{"n":"event"}}],[0,"host","vst","Host specific structures.",null,null],[3,"PluginLoader","vst::host","Wrapper for an externally loaded VST plugin.",null,null],[3,"PluginInstance","","An instance of an externally loaded VST plugin.",null,null],[3,"HostBuffer","","Used for constructing `AudioBuffer` instances on the host.",null,null],[4,"PluginLoadError","","All possible errors that can occur when loading a VST plugin.",null,null],[13,"InvalidPath","","Could not load given path.",43,null],[13,"NotAPlugin","","Given path is not a VST plugin.",43,null],[13,"InstanceFailed","","Failed to create an instance of this plugin.",43,null],[13,"InvalidApiVersion","","The API version which the plugin used is not supported by this library.",43,null],[8,"Host","","Implemented by all VST hosts.",null,null],[11,"automate","","Automate a parameter; the value has been changed.",44,{"i":[{"n":"self"},{"n":"i32"},{"n":"f32"}]}],[11,"get_plugin_id","","Get the plugin ID of the currently loading plugin.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"idle","","An idle call.",44,{"i":[{"n":"self"}]}],[11,"get_info","","Get vendor and product information.",44,null],[11,"process_events","","Handle incoming events from the plugin.",44,{"i":[{"n":"self"},{"n":"events"}]}],[11,"get_time_info","","Get time information.",44,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["timeinfo"],"n":"option"}}],[11,"get_block_size","","Get block size.",44,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",43,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"drop","","",45,{"i":[{"n":"self"}]}],[11,"load","","Load a plugin at the given path with the given host.",46,{"i":[{"n":"path"},{"g":["mutex"],"n":"arc"}],"o":{"g":["pluginloader","pluginloaderror"],"n":"result"}}],[11,"instance","","Try to create an instance of this VST plugin.",46,{"i":[{"n":"self"}],"o":{"g":["plugininstance","pluginloaderror"],"n":"result"}}],[11,"get_info","","",45,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"init","","",45,{"i":[{"n":"self"}]}],[11,"change_preset","","",45,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"get_preset_num","","",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"set_preset_name","","",45,{"i":[{"n":"self"},{"n":"string"}]}],[11,"get_preset_name","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_label","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_text","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_name","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"f32"}}],[11,"set_parameter","","",45,{"i":[{"n":"self"},{"n":"i32"},{"n":"f32"}]}],[11,"can_be_automated","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"string_to_parameter","","",45,{"i":[{"n":"self"},{"n":"i32"},{"n":"string"}],"o":{"n":"bool"}}],[11,"set_sample_rate","","",45,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"set_block_size","","",45,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"resume","","",45,{"i":[{"n":"self"}]}],[11,"suspend","","",45,{"i":[{"n":"self"}]}],[11,"vendor_specific","","",45,null],[11,"can_do","","",45,{"i":[{"n":"self"},{"n":"cando"}],"o":{"n":"supported"}}],[11,"get_tail_size","","",45,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"process","","",45,{"i":[{"n":"self"},{"n":"audiobuffer"}]}],[11,"process_f64","","",45,{"i":[{"n":"self"},{"n":"audiobuffer"}]}],[11,"process_events","","",45,{"i":[{"n":"self"},{"n":"events"}]}],[11,"get_preset_data","","",45,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"get_bank_data","","",45,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"load_preset_data","","",45,null],[11,"load_bank_data","","",45,null],[11,"get_input_info","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"channelinfo"}}],[11,"get_output_info","","",45,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"channelinfo"}}],[11,"new","","Create a `HostBuffer` for a given number of input and output channels.",47,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"hostbuffer"}}],[11,"from_info","","Create a `HostBuffer` for the number of input and output channels specified in an `Info` struct.",47,{"i":[{"n":"info"}],"o":{"n":"hostbuffer"}}],[11,"bind","","Bind sample arrays to the `HostBuffer` to create an `AudioBuffer` to pass to a plugin.",47,null],[11,"input_count","","Number of input channels supported by this `HostBuffer`.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"output_count","","Number of output channels supported by this `HostBuffer`.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"plugin","vst","Plugin specific structures.",null,null],[3,"Info","vst::plugin","A structure representing static plugin information.",null,null],[12,"name","","Plugin Name.",48,null],[12,"vendor","","Plugin Vendor.",48,null],[12,"presets","","Number of different presets.",48,null],[12,"parameters","","Number of parameters.",48,null],[12,"inputs","","Number of inputs.",48,null],[12,"outputs","","Number of outputs.",48,null],[12,"midi_inputs","","Number of MIDI input channels (1-16), or 0 for the default of 16 channels.",48,null],[12,"midi_outputs","","Number of MIDI output channels (1-16), or 0 for the default of 16 channels.",48,null],[12,"unique_id","","Unique plugin ID. Can be registered with Steinberg to prevent conflicts with other plugins.",48,null],[12,"version","","Plugin version (e.g. 0001 = `v0.0.0.1`, 1283 = `v1.2.8.3`).",48,null],[12,"category","","Plugin category. Possible values are found in `enums::PluginCategory`.",48,null],[12,"initial_delay","","Latency of the plugin in samples.",48,null],[12,"preset_chunks","","Indicates that preset data is handled in formatless chunks.",48,null],[12,"f64_precision","","Indicates whether this plugin can process f64 based `AudioBuffer` buffers.",48,null],[12,"silent_when_stopped","","If this is true, the plugin will not produce sound when the input is silence.",48,null],[3,"HostCallback","","A reference to the host which allows the plugin to call back and access information.",null,null],[4,"Category","","Plugin type. Generally either Effect or Synth.",null,null],[13,"Unknown","","Unknown / not implemented",49,null],[13,"Effect","","Any effect",49,null],[13,"Synth","","VST instrument",49,null],[13,"Analysis","","Scope, tuner, spectrum analyser, etc.",49,null],[13,"Mastering","","Dynamics, etc.",49,null],[13,"Spacializer","","Panners, etc.",49,null],[13,"RoomFx","","Delays and Reverbs",49,null],[13,"SurroundFx","","Dedicated surround processor.",49,null],[13,"Restoration","","Denoiser, etc.",49,null],[13,"OfflineProcess","","Offline processing.",49,null],[13,"Shell","","Contains other plugins.",49,null],[13,"Generator","","Tone generator, etc.",49,null],[4,"CanDo","","Features which are optionally supported by a plugin. These are queried by the host at run time.",null,null],[13,"SendEvents","","",50,null],[13,"SendMidiEvent","","",50,null],[13,"ReceiveEvents","","",50,null],[13,"ReceiveMidiEvent","","",50,null],[13,"ReceiveTimeInfo","","",50,null],[13,"Offline","","",50,null],[13,"MidiProgramNames","","",50,null],[13,"Bypass","","",50,null],[13,"ReceiveSysExEvent","","",50,null],[13,"MidiSingleNoteTuningChange","","",50,null],[13,"MidiKeyBasedInstrumentControl","","",50,null],[13,"Other","","",50,null],[8,"Plugin","","Must be implemented by all VST plugins.",null,null],[10,"get_info","","This method must return an `Info` struct.",51,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"new","","Called during initialization to pass a `HostCallback` to the plugin.",51,{"i":[{"n":"hostcallback"}],"o":{"n":"self"}}],[11,"init","","Called when plugin is fully initialized.",51,{"i":[{"n":"self"}]}],[11,"change_preset","","Set the current preset to the index specified by `preset`.",51,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"get_preset_num","","Get the current preset index.",51,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"set_preset_name","","Set the current preset name.",51,{"i":[{"n":"self"},{"n":"string"}]}],[11,"get_preset_name","","Get the name of the preset at the index specified by `preset`.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_label","","Get parameter label for parameter at `index` (e.g. \"db\", \"sec\", \"ms\", \"%\").",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_text","","Get the parameter value for parameter at `index` (e.g. \"1.0\", \"150\", \"Plate\", \"Off\").",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter_name","","Get the name of parameter at `index`.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"string"}}],[11,"get_parameter","","Get the value of paramater at `index`. Should be value between 0.0 and 1.0.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"f32"}}],[11,"set_parameter","","Set the value of parameter at `index`. `value` is between 0.0 and 1.0.",51,{"i":[{"n":"self"},{"n":"i32"},{"n":"f32"}]}],[11,"can_be_automated","","Return whether parameter at `index` can be automated.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"string_to_parameter","","Use String as input for parameter value. Used by host to provide an editable field to adjust a parameter value. E.g. \"100\" may be interpreted as 100hz for parameter. Returns if the input string was used.",51,{"i":[{"n":"self"},{"n":"i32"},{"n":"string"}],"o":{"n":"bool"}}],[11,"set_sample_rate","","Called when sample rate is changed by host.",51,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"set_block_size","","Called when block size is changed by host.",51,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"resume","","Called when plugin is turned on.",51,{"i":[{"n":"self"}]}],[11,"suspend","","Called when plugin is turned off.",51,{"i":[{"n":"self"}]}],[11,"vendor_specific","","Vendor specific handling.",51,null],[11,"can_do","","Return whether plugin supports specified action.",51,{"i":[{"n":"self"},{"n":"cando"}],"o":{"n":"supported"}}],[11,"get_tail_size","","Get the tail size of plugin when it is stopped. Used in offline processing as well.",51,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"process","","Process an audio buffer containing `f32` values.",51,{"i":[{"n":"self"},{"n":"audiobuffer"}]}],[11,"process_f64","","Process an audio buffer containing `f64` values.",51,{"i":[{"n":"self"},{"n":"audiobuffer"}]}],[11,"process_events","","Handle incoming events sent from the host.",51,{"i":[{"n":"self"},{"n":"events"}]}],[11,"get_editor","","Return handle to plugin editor if supported.",51,{"i":[{"n":"self"}],"o":{"g":["editor"],"n":"option"}}],[11,"get_preset_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current preset.",51,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"get_bank_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current plugin bank.",51,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"load_preset_data","","If `preset_chunks` is set to true in plugin info, this should load a preset from the given chunk data.",51,null],[11,"load_bank_data","","If `preset_chunks` is set to true in plugin info, this should load a preset bank from the given chunk data.",51,null],[11,"get_input_info","","Get information about an input channel. Only used by some hosts.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"channelinfo"}}],[11,"get_output_info","","Get information about an output channel. Only used by some hosts.",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"channelinfo"}}],[11,"start_process","","Called one time before the start of process call. This indicates that the process call will be interrupted (due to Host reconfiguration or bypass state when the plug-in doesn't support softBypass).",51,{"i":[{"n":"self"}]}],[11,"stop_process","","Called after the stop of process call.",51,{"i":[{"n":"self"}]}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"category"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",49,{"i":[{"n":"i8"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"from","","",49,{"i":[{"n":"i16"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"from","","",49,{"i":[{"n":"i32"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from","","",49,{"i":[{"n":"i64"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"from","","",49,{"i":[{"n":"isize"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"from","","",49,{"i":[{"n":"u8"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","",49,{"i":[{"n":"u16"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"from","","",49,{"i":[{"n":"u32"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from","","",49,{"i":[{"n":"u64"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"from","","",49,{"i":[{"n":"usize"}],"o":{"n":"category"}}],[11,"into","","",49,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",48,{"o":{"n":"info"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Converts a string to a `CanDo` instance. Any given string that does not match the predefined values will return a `CanDo::Other` value.",50,{"i":[{"n":"str"}],"o":{"n":"cando"}}],[11,"into","","",50,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"hostcallback"}}],[11,"default","","",52,{"o":{"n":"hostcallback"}}],[11,"vst_version","","Get the VST API version supported by the host e.g. `2400 = VST 2.4`.",52,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"raw_callback","","Get the callback for calling host-specific extensions",52,{"i":[{"n":"self"}],"o":{"g":["hostcallbackproc"],"n":"option"}}],[11,"raw_effect","","Get the effect pointer for calling host-specific extensions",52,null],[11,"automate","","",52,{"i":[{"n":"self"},{"n":"i32"},{"n":"f32"}]}],[11,"get_plugin_id","","",52,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"idle","","",52,{"i":[{"n":"self"}]}],[11,"get_info","","",52,null],[11,"process_events","","Send events to the host.",52,{"i":[{"n":"self"},{"n":"events"}]}],[11,"get_time_info","","Request time information from Host.",52,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["timeinfo"],"n":"option"}}],[11,"get_block_size","","Get block size.",52,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[14,"plugin_main","vst","Exports the necessary symbols for the plugin to be used by a VST host.",null,null],[11,"write_into","vst::event","",40,{"i":[{"n":"self"},{"n":"placeholderevent"}]}],[11,"write_into","","",41,{"i":[{"n":"self"},{"n":"placeholderevent"}]}],[11,"write_into","","",42,{"i":[{"n":"self"},{"n":"placeholderevent"}]}]],"paths":[[8,"WriteIntoPlaceholder"],[3,"AudioBuffer"],[3,"Inputs"],[3,"InputIterator"],[3,"Outputs"],[3,"OutputIterator"],[3,"SendEventBuffer"],[3,"AEffect"],[3,"ChannelProperties"],[3,"FileType"],[3,"FileSelect"],[3,"Events"],[3,"Event"],[3,"MidiEvent"],[3,"SysExEvent"],[3,"TimeInfo"],[4,"SpeakerArrangementType"],[4,"Supported"],[4,"ProcessLevel"],[4,"HostLanguage"],[4,"FileSelectCommand"],[4,"FileSelectType"],[4,"EventType"],[4,"SmpteFrameRate"],[3,"EventIterator"],[3,"ChannelFlags"],[3,"PluginFlags"],[3,"ModifierKey"],[3,"MidiEventFlags"],[3,"TimeInfoFlags"],[3,"KeyCode"],[4,"KnobMode"],[4,"Key"],[8,"Editor"],[4,"ArrangementTarget"],[4,"StereoChannel"],[4,"StereoConfig"],[4,"SurroundConfig"],[4,"SpeakerArrangementType"],[3,"ChannelInfo"],[3,"MidiEvent"],[3,"SysExEvent"],[4,"Event"],[4,"PluginLoadError"],[8,"Host"],[3,"PluginInstance"],[3,"PluginLoader"],[3,"HostBuffer"],[3,"Info"],[4,"Category"],[4,"CanDo"],[8,"Plugin"],[3,"HostCallback"]]};
initSearch(searchIndex);
